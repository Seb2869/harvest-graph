type Controller @entity {
  "controller address"
  id: ID!
  governance: String!
  store: String!
  createAtBlock: BigInt!
  timestamp: BigInt!
}

type Vault @entity {
  "vault address"
  id: ID!
  name: String!
  symbol: String!
  decimal: BigInt!
  createAtBlock: BigInt!
  timestamp: BigInt!
  strategy: Strategy
  pool: Pool
  underlying: Token!
  "data from sharePriceChangeLog"
  lastShareTimestamp: BigInt!
  "data from sharePriceChangeLog"
  lastSharePrice: BigInt!
  apyAutoCompound: BigDecimal!
  apyAutoCompoundCount: BigInt!
  apyReward: BigDecimal!
  apyRewardCount: BigInt!
  isUniswapV3: Boolean
  skipFirstApyReward: Boolean
}

type Strategy @entity {
  "strategy address"
  id: ID!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type SharePrice @entity {
  "tx hash"
  id: ID!
  vault: Vault
  strategy: Strategy
  oldSharePrice: BigInt!
  newSharePrice: BigInt!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type Tvl @entity {
  "tx-vault"
  id: ID!
  vault: Vault
  totalSupply: BigInt!
  value: BigDecimal!
  priceUnderlying: BigDecimal!
  sharePrice: BigInt!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type Pool @entity {
  "pool address"
  id: ID!
  vault: Vault!
  "pool type"
  type: PoolType!
  # lpToken: Token!
  rewardTokens: [Token!]!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type Token @entity {
  "token address"
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}

type User @entity {
  id: ID!
}

enum PoolType {
  NoMintRewardPool
  PotPool
  ExclusiveRewardPool
}

type Reward @entity {
  # transaction hash alone is not unique, we need to add pool address
  "transactionhash-pooladdress-rewardtoken"
  id: ID!
  timestamp: BigInt!
  pool: Pool!
  "token that is rewarded"
  token: Token!
  "amount of reward added"
  reward: BigInt!
  "reward rate after reward was added - valid untill next reward or periodFinish"
  rewardRate: BigInt!
  "timestamp when the pool runs out of rewards if no new rewards are added"
  periodFinish: BigInt!
}

type ApyReward @entity {
  "transactionhash-vaultaddress"
  id: ID!
  vault: Vault!
  apy: BigDecimal!
  apr: BigDecimal!
  priceUnderlying: BigDecimal!
  periodFinish: BigInt!
  rewardAmount: BigInt!
  rewardRate: BigInt!
  rewardForPeriod: BigDecimal!
  tvlUsd: BigDecimal!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type ApyAutoCompound @entity {
  "transactionhash-vaultaddress"
  id: ID!
  vault: Vault!
  apy: BigDecimal!
  apr: BigDecimal!
  diffSharePrice: BigDecimal!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type AutoStake @entity {
  "farm pool address"
  id: ID!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type UniswapV3Pool @entity {
  "symbol-symbol-fee"
  id: ID!
  tokenA: Token!
  tokenB: Token!
  pool: String!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type UserBalance @entity {
  "vault-user"
  id: ID!
  vault: Vault!
  userAddress: String!
  value: BigDecimal!
  additionalValues: [BigDecimal!]!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type UserBalanceHistory @entity {
  "tx-user"
  id: ID!
  userAddress: String!
  transactionType: TransactionType!
  vault: Vault!
  "Amount balance in user address"
  value: BigDecimal!
  additionalValues: [BigDecimal!]!
#  vaultBalance: BigDecimal!
#  poolBalance: BigDecimal!
  sharePrice: BigInt!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

type UserTransaction @entity {
  "tx"
  id: ID!
  userAddress: String!
  transactionType: TransactionType!
  vault: Vault!
  "Amount in transaction"
  value: BigInt!
  sharePrice: BigInt!
  timestamp: BigInt!
  createAtBlock: BigInt!
}

enum TransactionType {
  Deposit
  Withdraw
}

